services:
  basket.api:
    build:
      context: C:\Users\adeil\Documents\EstudarC#\Microservices
      dockerfile: C:\Users\adeil\Documents\EstudarC#\Microservices\Basket.Api\Dockerfile
    container_name: basket.api
    depends_on:
      basketdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CachingSettings:ConnectionString: basketdb:6379
    image: basketapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: 8001
      protocol: tcp
  basketdb:
    container_name: basketdb
    image: redis:alpine
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6379
      published: 6379
      protocol: tcp
    restart: always
  catalog.api:
    build:
      context: C:\Users\adeil\Documents\EstudarC#\Microservices
      dockerfile: C:\Users\adeil\Documents\EstudarC#\Microservices\Catalog.API\Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: mongodb://catalogdb:27017
    image: catalogapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: 8000
      protocol: tcp
  catalogdb:
    container_name: catalogdb
    image: mongo
    networks:
      default: null
    ports:
    - mode: ingress
      target: 27017
      published: 27017
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: mongo_data
      target: /data/db
      volume: {}
  discount.api:
    build:
      context: C:\Users\adeil\Documents\EstudarC#\Microservices
      dockerfile: C:\Users\adeil\Documents\EstudarC#\Microservices\Discount.Api\Dockerfile
    container_name: discount.api
    depends_on:
      discountdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User
        Id=postgres;Password=admin;
    image: discountapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: 8002
      protocol: tcp
  discountdb:
    container_name: discountdb
    environment:
      POSTGRES_DB: DiscountDb
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: postgres
    image: postgres
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5432
      published: 5432
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: postgres_data
      target: /var/lib/postgresql/data
      volume: {}
  pgadmin:
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@adeilson.com
      PGADMIN_DEFAULT_PASSWORD: admin
    image: dpage/pgadmin4
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: 5050
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: pgadmin_data
      target: /root/.pgadmin
      volume: {}
networks:
  default:
    name: dockercompose12783592217614448453_default
volumes:
  mongo_data:
    name: dockercompose12783592217614448453_mongo_data
  pgadmin_data:
    name: dockercompose12783592217614448453_pgadmin_data
  postgres_data:
    name: dockercompose12783592217614448453_postgres_data